<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="String1" xml:space="preserve">
    <value>ASSURANCES</value>
  </data>
  <data name="String10" xml:space="preserve">
    <value>courses de vitesse, conduite d'obstacles et conduite payante</value>
  </data>
  <data name="String11" xml:space="preserve">
    <value>accidents causés intentionnellement, sous l'influence, dans des crimes</value>
  </data>
  <data name="String12" xml:space="preserve">
    <value>accidents causés par une maladie ou des conditions morbides</value>
  </data>
  <data name="String13" xml:space="preserve">
    <value>Qu'est-ce qu'un accident tel qu'indiqué dans la police?</value>
  </data>
  <data name="String14" xml:space="preserve">
    <value>"Un accident est exclusivement considéré comme tout événement soudain et anormal causé par une force extérieure et qui entraîne directement une blessure physique"</value>
  </data>
  <data name="String15" xml:space="preserve">
    <value>Quels montants sont fournis?</value>
  </data>
  <data name="String16" xml:space="preserve">
    <value>à la mort</value>
  </data>
  <data name="String17" xml:space="preserve">
    <value>un handicap permanent</value>
  </data>
  <data name="String18" xml:space="preserve">
    <value>frais de soins infirmiers</value>
  </data>
  <data name="String19" xml:space="preserve">
    <value>Exemption en anglais</value>
  </data>
  <data name="String2" xml:space="preserve">
    <value>Le stud-book belge du cheval frison est assuré avec:</value>
  </data>
  <data name="String20" xml:space="preserve">
    <value>Pour les sinistres inférieurs à 39 euros =&gt; pas de paiement par l'assurance.</value>
  </data>
  <data name="String21" xml:space="preserve">
    <value>Pour les réclamations de 40 euros et plus =&gt; l'assurance paie dès le premier euro.</value>
  </data>
  <data name="String21.1" xml:space="preserve">
    <value>Exemple</value>
  </data>
  <data name="String22" xml:space="preserve">
    <value>Réclamation de 35 euros =&gt; rien n'est payé par l'assurance.</value>
  </data>
  <data name="String23" xml:space="preserve">
    <value>Une réclamation de 50 euros =&gt; l'assurance paie 50 euros.</value>
  </data>
  <data name="String24" xml:space="preserve">
    <value>Qui peut être assuré?</value>
  </data>
  <data name="String25" xml:space="preserve">
    <value>Toute personne impliquée dans l'équitation, vous-même, votre conjoint, vos enfants ou toute autre personne qui monte ou aide à la préparation, au gréement, etc.</value>
  </data>
  <data name="String26" xml:space="preserve">
    <value>Ceci à 15 € par personne. Ce montant est valable jusqu'à la fin de l'année.</value>
  </data>
  <data name="String27" xml:space="preserve">
    <value>Vous pouvez toujours avoir une personne assurée supplémentaire au cours de l'année, mais la prime reste de 15 € jusqu'à la fin de l'année.</value>
  </data>
  <data name="String28" xml:space="preserve">
    <value>Comment débuter avec l'assurance?</value>
  </data>
  <data name="String29" xml:space="preserve">
    <value>Prenez</value>
  </data>
  <data name="String3" xml:space="preserve">
    <value>BA et aide juridique.</value>
  </data>
  <data name="String30" xml:space="preserve">
    <value>contact</value>
  </data>
  <data name="String31" xml:space="preserve">
    <value>avec nous!</value>
  </data>
  <data name="String4" xml:space="preserve">
    <value>Police</value>
  </data>
  <data name="String5" xml:space="preserve">
    <value>Société</value>
  </data>
  <data name="String6" xml:space="preserve">
    <value>Assurance collective des membres de la SBCF - assurance accident</value>
  </data>
  <data name="String7" xml:space="preserve">
    <value>Dirigeants d'entreprises BA</value>
  </data>
  <data name="String8" xml:space="preserve">
    <value>Vous souhaitez adhérer à notre assurance collective accidents SBCF?</value>
  </data>
  <data name="String9" xml:space="preserve">
    <value>Il s'agit d'une police d'assurance individuelle accident pour l'équitation de loisir au sens général.
Cela peut être fait à la main, sous la selle comme en harnais.</value>
  </data>
  <data name="String9.1" xml:space="preserve">
    <value>Cependant, sont exclus:</value>
  </data>
</root>