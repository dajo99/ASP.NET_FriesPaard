<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="String1" xml:space="preserve">
    <value>Keuringen</value>
  </data>
  <data name="String10" xml:space="preserve">
    <value>Zowel op de veulenkeuring als op de nationale dag van het Friese paard zijn er steeds heel wat te keuren paarden aanwezig, alsook hun eigenaars, familie en andere geïnteresseerden.</value>
  </data>
  <data name="String11" xml:space="preserve">
    <value>Keuringen in het buitenland</value>
  </data>
  <data name="String12" xml:space="preserve">
    <value>Aangezien het Friese paard zijn oorsprong vindt in Nederland, vinden ook hier de meeste keuringen plaats.</value>
  </data>
  <data name="String13" xml:space="preserve">
    <value>Wij geven u daarom in onze agenda een overzicht van alle buitenlandse keuringen alsook de fokdagen. Voor meer info kan u ook steeds surfen naar de</value>
  </data>
  <data name="String14" xml:space="preserve">
    <value>agenda van het KFPS</value>
  </data>
  <data name="String2" xml:space="preserve">
    <value>Elk jaar kan u op diverse locaties terecht om uw paarden en veulens te laten keuren.</value>
  </data>
  <data name="String3" xml:space="preserve">
    <value>Voor de algemene aandachtspunten voor dit keuringsseizoen klikt u</value>
  </data>
  <data name="String3.1" xml:space="preserve">
    <value>hier</value>
  </data>
  <data name="String4" xml:space="preserve">
    <value>Doorheen de hele lente en zomer zijn er op diverse locaties keuringen. Ook leuk om gewoon eens rond te kijken.
Proberen te begrijpen wat die jury nu precies zoekt in het ideale Friese paard.</value>
  </data>
  <data name="String5" xml:space="preserve">
    <value>U vindt er gegarandeerd andere paardenliefhebbers. Vooral dan van het Friese ras.</value>
  </data>
  <data name="String6" xml:space="preserve">
    <value>Zeker op onze eigen nationale dag van het Friese paard in Ternat moet u eens zijn langs geweest. Naast tal van mooie paarden, is er ook een heel showgegeven waarin ons geliefde ras extra in de kijker wordt gezet.</value>
  </data>
  <data name="String7" xml:space="preserve">
    <value>De keuringen vinden plaats in België of in het buitenland.</value>
  </data>
  <data name="String8" xml:space="preserve">
    <value>Keuringen in eigen land</value>
  </data>
  <data name="String9" xml:space="preserve">
    <value>Ons Belgenlandje is niet erg groot, maar toch slagen we erin om op onze keuringen heel wat volk bij elkaar te krijgen.</value>
  </data>
</root>